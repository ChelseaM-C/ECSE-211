import java.util.ArrayList;

/**This class generates a Path when given a start, destination, and map.
 * 
 * @author Daniel
 *
 */
public class Pathfinder {
	private ArrayList<Path> paths;
	
	private Path path;
	
	private Map map;
	
	private GridSquare destination,start;
	/**
	 * 
	 * @param map the map the robot is on
	 * @param destination destination GridSquare
	 * @param start Starting GridSquare
	 */
	public Pathfinder(Map map, GridSquare destination, GridSquare start){
		this.map = map;
		this.destination = destination;
		this.start = start;
		this.paths = new ArrayList<Path>();
		Path init = new Path();
		init.addSquare(start);
		paths.add(init);
		start.visit();
	}
	
	
	private int validCount(){
		int count = 0;
		for(Path p : paths){
			if(p.isValid()){
				count++;
			}
		}
		return count;
	}
	
	//Recursivly BFS for path
	public void genPath(){
		ArrayList<Path> temp = new ArrayList<Path>();
		boolean completed = false;
		while(!completed){
			for(Path p : paths){
				for(GridSquare g : p.getEnd().getSquares()){
					if(!g.isVisited()){
						Path newPath = new Path();
						newPath = p.clone();
						newPath.addSquare(g);
						g.visit();
						temp.add(newPath);
					}
				}
				if(p.getEnd().getX() == destination.getX() && p.getEnd().getY() == destination.getY()){
					this.path = p;
					completed = true;
					
				}
			}
			paths.addAll(temp);
		}
	}
	/**
	 * Gets the path.
	 * @return the path, the light, the way.
	 */
	public Path getPath(){
		return path;
	}
}
