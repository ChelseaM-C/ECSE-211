import java.util.ArrayList;

/**Path class contains a path of gridSquares and WayPoints to navigate the robot
 * 
 * @author Daniel
 *
 */
public class Path {
	private ArrayList<GridSquare> squares;
//	private ArrayList<Waypoint> points;
	
	private boolean valid;
	
	/**
	 * Initializes a new Path
	 */
	public Path(){
		squares = new ArrayList<GridSquare>();
		valid = false;
	}
	
		
	/**
	 * Sets the squares contained by the path
	 * @param s ArrayList of ordered GridSquares
	 */
	public void setSquares(ArrayList<GridSquare> s){
		for(GridSquare sq : s){
			GridSquare n = new GridSquare(sq.getMap(),sq.getX(),sq.getY(),sq.isWall());
			if(sq.isVisited()){
				n.visit();
			}
			this.squares.add(sq);
		}
	}
	
	/**
	 * Adds a square to the end of the path
	 * @param s the GridSquare to be appended
	 */
	public void addSquare(GridSquare s){
		s.visit();
		squares.add(s);
	}
	
	/**
	 * Clones the path
	 * @return a new and equal path
	 */
	public Path clone(){
		Path p = new Path();
		p.setSquares(this.squares);
		return p;
	}
	/**
	 * 
	 * @return the Path(Squares)
	 */
	public ArrayList<GridSquare> getSquares(){
		return squares;
	}
	/**
	 * 
	 * @return the Path(WayPoints)
	 */
//	public ArrayList<Waypoint> getPoints(){
//		points = new ArrayList<Waypoint>();
//		for(int i = 0; i < squares.size(); i++){
//			points.add(squareToPoint(squares.get(i)));
//		}
//		return points;
//	}
	
	private Waypoint squareToPoint(GridSquare s){
		Waypoint p = new Waypoint(15 + s.getX()*30,15 + s.getY()*30);
		return p;
	}
	
	/**
	 * sets path to valid (Pathfinder)
	 */
	public void valid(){
		valid = true;
	}
	/**
	 * 
	 * @return validity of path
	 */
	public boolean isValid(){
		return valid;
	}
	/**Returns the square at the end of the Path
	 * 
	 * @return the end of the Path
	 */
	public GridSquare getEnd(){
		return squares.get(squares.size() - 1);
	}
	
	/**
	 * Debugging the pathfinder, will print the gridSquare coords in order
	 */
	public String toString(){
		String p = "";
		for(int i = 0; i < squares.size(); i++){
			p = ( p + "[" + squares.get(i).getX() + "," + squares.get(i).getY() + "] ");
		}
		
		return p;
	}
}
