import java.util.ArrayList;


public class Pathfinder {
	private ArrayList<Path> paths;
	
	private Path path;
	
	private Map map;
	
	private GridSquare destination,start;
	
	public Pathfinder(Map map, GridSquare destination, GridSquare start){
		this.map = map;
		this.destination = destination;
		this.start = start;
		this.paths = new ArrayList<Path>();
		Path init = new Path();
		init.addSquare(start);
		paths.add(init);
		start.visit();
	}
	
	private int validCount(){
		int count = 0;
		for(Path p : paths){
			if(p.isValid()){
				count++;
			}
		}
		return count;
	}
	
	//Recursivly BFS for path
	public void genPath(){
		for(Path p : paths){
			for(GridSquare g : p.getEnd().getSquares()){
				if(!g.isVisited()){
					Path newPath = new Path();
					newPath = p.clone();
					newPath.addSquare(g);
					g.visit();
					paths.add(newPath);
				}
			}
		}
	}
}
